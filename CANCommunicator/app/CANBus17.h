//
// Created by Connor Monahan on 2/24/18.
//

#ifndef CANCOMMUNICATOR_CANBUS17_H
#define CANCOMMUNICATOR_CANBUS17_H

#include <stdint.h>
#define ubyte uint8_t
#define uword uint16_t


/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on Sat Feb 24 12:34:11 CST 2018.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_-
 */

/**
 * @defgroup DB_- CAN Database -
 *
 * Path to file: -
 *
 * Provides the following ECUs:
 * - \ref ECU_AEM_EMS_4
 */

/**
 * @defgroup ECU_AEM_EMS_4 Electronics Control Unit AEM_EMS_4
 *
 * This ECU was defined in \ref DB_-.
 *
 * TX messages:
 * - \ref MSG_AEMEngine3
 * - \ref MSG_AEMEngine2
 * - \ref MSG_AEMEngine1
 * - \ref MSG_AEMEngine0
 *
 * RX signals:
 *
 * @ingroup DB_-
 */

/**
 * @defgroup MSG_AEMEngine3 Message AEMEngine3 (0x1f0a003)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine3_ECUBatteryVoltage
 * - \ref SIG_AEMEngine3_IgnitionTiming
 * - \ref SIG_AEMEngine3_GearPosCalculated
 * - \ref SIG_AEMEngine3_VehicleSpeed
 * - \ref SIG_AEMEngine3_AFR1
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine3 configuration tuple.
 */
#define MSG_AEMEngine3                              0x1f0a003, 1, 8

/**
 * Message AEMEngine3 id.
 */
#define ID_AEMEngine3                               0x1f0a003

/**
 * Message AEMEngine3 extended id bit.
 */
#define EXT_AEMEngine3                              1

/**
 * Message AEMEngine3 Data Length Count.
 */
#define DLC_AEMEngine3                              8

/**
 * Message AEMEngine3 cycle time.
 */
#define CYCLE_AEMEngine3                            20

/**
 * Message AEMEngine3 fast cycle time.
 */
#define FAST_AEMEngine3                             0

/**
 * Initialise message AEMEngine3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine3(buf) { \
	INITSIG_AEMEngine3_ECUBatteryVoltage(buf); \
	INITSIG_AEMEngine3_IgnitionTiming(buf); \
	INITSIG_AEMEngine3_GearPosCalculated(buf); \
	INITSIG_AEMEngine3_VehicleSpeed(buf); \
	INITSIG_AEMEngine3_AFR1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_AEMEngine2 Message AEMEngine2 (0x1f0a002)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine2_ECU_GPIO7_Voltage
 * - \ref SIG_AEMEngine2_ECU_GPIO4_Voltage
 * - \ref SIG_AEMEngine2_ECUBatteryVoltage
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine2 configuration tuple.
 */
#define MSG_AEMEngine2                              0x1f0a002, 1, 8

/**
 * Message AEMEngine2 id.
 */
#define ID_AEMEngine2                               0x1f0a002

/**
 * Message AEMEngine2 extended id bit.
 */
#define EXT_AEMEngine2                              1

/**
 * Message AEMEngine2 Data Length Count.
 */
#define DLC_AEMEngine2                              8

/**
 * Message AEMEngine2 cycle time.
 */
#define CYCLE_AEMEngine2                            16

/**
 * Message AEMEngine2 fast cycle time.
 */
#define FAST_AEMEngine2                             0

/**
 * Initialise message AEMEngine2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine2(buf) { \
	INITSIG_AEMEngine2_ECU_GPIO7_Voltage(buf); \
	INITSIG_AEMEngine2_ECU_GPIO4_Voltage(buf); \
	INITSIG_AEMEngine2_ECUBatteryVoltage(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_AEMEngine1 Message AEMEngine1 (0x1f0a001)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine1_ECU_GPIO5_Voltage
 * - \ref SIG_AEMEngine1_ECU_GPIO4_Voltage
 * - \ref SIG_AEMEngine1_ECU_GPIO2_Voltage
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine1 configuration tuple.
 */
#define MSG_AEMEngine1                              0x1f0a001, 1, 8

/**
 * Message AEMEngine1 id.
 */
#define ID_AEMEngine1                               0x1f0a001

/**
 * Message AEMEngine1 extended id bit.
 */
#define EXT_AEMEngine1                              1

/**
 * Message AEMEngine1 Data Length Count.
 */
#define DLC_AEMEngine1                              8

/**
 * Message AEMEngine1 cycle time.
 */
#define CYCLE_AEMEngine1                            16

/**
 * Message AEMEngine1 fast cycle time.
 */
#define FAST_AEMEngine1                             0

/**
 * Initialise message AEMEngine1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine1(buf) { \
	INITSIG_AEMEngine1_ECU_GPIO5_Voltage(buf); \
	INITSIG_AEMEngine1_ECU_GPIO4_Voltage(buf); \
	INITSIG_AEMEngine1_ECU_GPIO2_Voltage(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_AEMEngine0 Message AEMEngine0 (0x1f0a000)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine0_CoolantTemp
 * - \ref SIG_AEMEngine0_IntakeManifoldAirTemp
 * - \ref SIG_AEMEngine0_ThrottlePos
 * - \ref SIG_AEMEngine0_EngineLoad
 * - \ref SIG_AEMEngine0_EngineSpeed
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine0 configuration tuple.
 */
#define MSG_AEMEngine0                              0x1f0a000, 1, 8

/**
 * Message AEMEngine0 id.
 */
#define ID_AEMEngine0                               0x1f0a000

/**
 * Message AEMEngine0 extended id bit.
 */
#define EXT_AEMEngine0                              1

/**
 * Message AEMEngine0 Data Length Count.
 */
#define DLC_AEMEngine0                              8

/**
 * Message AEMEngine0 cycle time.
 */
#define CYCLE_AEMEngine0                            16

/**
 * Message AEMEngine0 fast cycle time.
 */
#define FAST_AEMEngine0                             0

/**
 * Initialise message AEMEngine0 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine0(buf) { \
	INITSIG_AEMEngine0_CoolantTemp(buf); \
	INITSIG_AEMEngine0_IntakeManifoldAirTemp(buf); \
	INITSIG_AEMEngine0_ThrottlePos(buf); \
	INITSIG_AEMEngine0_EngineLoad(buf); \
	INITSIG_AEMEngine0_EngineSpeed(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_ECUBatteryVoltage Signal ECUBatteryVoltage of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal ECUBatteryVoltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_ECUBatteryVoltage and \ref GET_AEMEngine3_ECUBatteryVoltage instead.
 */
#define SIG_AEMEngine3_ECUBatteryVoltage            1, 0, 55, 16

/**
 * Signal ECUBatteryVoltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_ECUBatteryVoltage or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_ECUBatteryVoltage          1, 0, 55, 16, 0

/**
 * Get signal ECUBatteryVoltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_ECUBatteryVoltage(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECUBatteryVoltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_ECUBatteryVoltage(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECUBatteryVoltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_ECUBatteryVoltage(buf) \
	SET_AEMEngine3_ECUBatteryVoltage(buf, 0)

/**
 * Signal ECUBatteryVoltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_ECUBatteryVoltage(x, fmt) \
	((x) * fmt / 4096)

/**
 * Signal ECUBatteryVoltage raw initial value.
 */
#define START_AEMEngine3_ECUBatteryVoltage          0

/**
 * Signal ECUBatteryVoltage raw minimum value.
 */
#define MIN_AEMEngine3_ECUBatteryVoltage            0

/**
 * Signal ECUBatteryVoltage raw maximum value.
 */
#define MAX_AEMEngine3_ECUBatteryVoltage            65536

/**
 * Signal ECUBatteryVoltage raw offset value.
 */
#define OFF_AEMEngine3_ECUBatteryVoltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_IgnitionTiming Signal IgnitionTiming of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal IgnitionTiming configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_IgnitionTiming and \ref GET_AEMEngine3_IgnitionTiming instead.
 */
#define SIG_AEMEngine3_IgnitionTiming               1, 0, 47, 8

/**
 * Signal IgnitionTiming setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_IgnitionTiming or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_IgnitionTiming             1, 0, 47, 8, 0

/**
 * Get signal IgnitionTiming from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_IgnitionTiming(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal IgnitionTiming in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_IgnitionTiming(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal IgnitionTiming in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_IgnitionTiming(buf) \
	SET_AEMEngine3_IgnitionTiming(buf, 0)

/**
 * Signal IgnitionTiming value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_IgnitionTiming(x, fmt) \
	((x) * fmt * 8789 / 25000 + fmt * (-17))

/**
 * Signal IgnitionTiming raw initial value.
 */
#define START_AEMEngine3_IgnitionTiming             0

/**
 * Signal IgnitionTiming raw minimum value.
 */
#define MIN_AEMEngine3_IgnitionTiming               0

/**
 * Signal IgnitionTiming raw maximum value.
 */
#define MAX_AEMEngine3_IgnitionTiming               255

/**
 * Signal IgnitionTiming raw offset value.
 */
#define OFF_AEMEngine3_IgnitionTiming               -48

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_GearPosCalculated Signal GearPosCalculated of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal GearPosCalculated configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_GearPosCalculated and \ref GET_AEMEngine3_GearPosCalculated instead.
 */
#define SIG_AEMEngine3_GearPosCalculated            1, 0, 39, 8

/**
 * Signal GearPosCalculated setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_GearPosCalculated or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_GearPosCalculated          1, 0, 39, 8, 0

/**
 * Get signal GearPosCalculated from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_GearPosCalculated(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GearPosCalculated in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_GearPosCalculated(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GearPosCalculated in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_GearPosCalculated(buf) \
	SET_AEMEngine3_GearPosCalculated(buf, 0)

/**
 * Signal GearPosCalculated value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_GearPosCalculated(x, fmt) \
	((x) * fmt)

/**
 * Signal GearPosCalculated raw initial value.
 */
#define START_AEMEngine3_GearPosCalculated          0

/**
 * Signal GearPosCalculated raw minimum value.
 */
#define MIN_AEMEngine3_GearPosCalculated            0

/**
 * Signal GearPosCalculated raw maximum value.
 */
#define MAX_AEMEngine3_GearPosCalculated            255

/**
 * Signal GearPosCalculated raw offset value.
 */
#define OFF_AEMEngine3_GearPosCalculated            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_VehicleSpeed Signal VehicleSpeed of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal VehicleSpeed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_VehicleSpeed and \ref GET_AEMEngine3_VehicleSpeed instead.
 */
#define SIG_AEMEngine3_VehicleSpeed                 1, 0, 23, 16

/**
 * Signal VehicleSpeed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_VehicleSpeed or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_VehicleSpeed               1, 0, 23, 16, 0

/**
 * Get signal VehicleSpeed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_VehicleSpeed(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehicleSpeed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_VehicleSpeed(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehicleSpeed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_VehicleSpeed(buf) \
	SET_AEMEngine3_VehicleSpeed(buf, 0)

/**
 * Signal VehicleSpeed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_VehicleSpeed(x, fmt) \
	((x) * fmt / 256)

/**
 * Signal VehicleSpeed raw initial value.
 */
#define START_AEMEngine3_VehicleSpeed               0

/**
 * Signal VehicleSpeed raw minimum value.
 */
#define MIN_AEMEngine3_VehicleSpeed                 0

/**
 * Signal VehicleSpeed raw maximum value.
 */
#define MAX_AEMEngine3_VehicleSpeed                 65535

/**
 * Signal VehicleSpeed raw offset value.
 */
#define OFF_AEMEngine3_VehicleSpeed                 0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_AFR1 Signal AFR1 of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal AFR1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_AFR1 and \ref GET_AEMEngine3_AFR1 instead.
 */
#define SIG_AEMEngine3_AFR1                         1, 0, 7, 8

/**
 * Signal AFR1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_AFR1 or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_AFR1                       1, 0, 7, 8, 0

/**
 * Get signal AFR1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_AFR1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal AFR1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_AFR1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal AFR1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_AFR1(buf) \
	SET_AEMEngine3_AFR1(buf, 0)

/**
 * Signal AFR1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_AFR1(x, fmt) \
	((x) * fmt * 500 / 8737 + fmt * 293 / 40)

/**
 * Signal AFR1 raw initial value.
 */
#define START_AEMEngine3_AFR1                       0

/**
 * Signal AFR1 raw minimum value.
 */
#define MIN_AEMEngine3_AFR1                         0

/**
 * Signal AFR1 raw maximum value.
 */
#define MAX_AEMEngine3_AFR1                         255

/**
 * Signal AFR1 raw offset value.
 */
#define OFF_AEMEngine3_AFR1                         128

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine2_ECU_GPIO7_Voltage Signal ECU_GPIO7_Voltage of Message AEMEngine2 (0x1f0a002)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine2
 * @{
 */

/**
 * Signal ECU_GPIO7_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine2_ECU_GPIO7_Voltage and \ref GET_AEMEngine2_ECU_GPIO7_Voltage instead.
 */
#define SIG_AEMEngine2_ECU_GPIO7_Voltage            1, 0, 39, 16

/**
 * Signal ECU_GPIO7_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine2_ECU_GPIO7_Voltage or \ref INIT_AEMEngine2 instead.
 */
#define SETUP_AEMEngine2_ECU_GPIO7_Voltage          1, 0, 39, 16, 0

/**
 * Get signal ECU_GPIO7_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine2_ECU_GPIO7_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO7_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine2_ECU_GPIO7_Voltage(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO7_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine2_ECU_GPIO7_Voltage(buf) \
	SET_AEMEngine2_ECU_GPIO7_Voltage(buf, 0)

/**
 * Signal ECU_GPIO7_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine2_ECU_GPIO7_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO7_Voltage raw initial value.
 */
#define START_AEMEngine2_ECU_GPIO7_Voltage          0

/**
 * Signal ECU_GPIO7_Voltage raw minimum value.
 */
#define MIN_AEMEngine2_ECU_GPIO7_Voltage            0

/**
 * Signal ECU_GPIO7_Voltage raw maximum value.
 */
#define MAX_AEMEngine2_ECU_GPIO7_Voltage            65535

/**
 * Signal ECU_GPIO7_Voltage raw offset value.
 */
#define OFF_AEMEngine2_ECU_GPIO7_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine2_ECU_GPIO4_Voltage Signal ECU_GPIO4_Voltage of Message AEMEngine2 (0x1f0a002)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine2
 * @{
 */

/**
 * Signal ECU_GPIO4_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine2_ECU_GPIO4_Voltage and \ref GET_AEMEngine2_ECU_GPIO4_Voltage instead.
 */
#define SIG_AEMEngine2_ECU_GPIO4_Voltage            1, 0, 23, 16

/**
 * Signal ECU_GPIO4_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine2_ECU_GPIO4_Voltage or \ref INIT_AEMEngine2 instead.
 */
#define SETUP_AEMEngine2_ECU_GPIO4_Voltage          1, 0, 23, 16, 0

/**
 * Get signal ECU_GPIO4_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine2_ECU_GPIO4_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO4_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine2_ECU_GPIO4_Voltage(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO4_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine2_ECU_GPIO4_Voltage(buf) \
	SET_AEMEngine2_ECU_GPIO4_Voltage(buf, 0)

/**
 * Signal ECU_GPIO4_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine2_ECU_GPIO4_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO4_Voltage raw initial value.
 */
#define START_AEMEngine2_ECU_GPIO4_Voltage          0

/**
 * Signal ECU_GPIO4_Voltage raw minimum value.
 */
#define MIN_AEMEngine2_ECU_GPIO4_Voltage            0

/**
 * Signal ECU_GPIO4_Voltage raw maximum value.
 */
#define MAX_AEMEngine2_ECU_GPIO4_Voltage            65535

/**
 * Signal ECU_GPIO4_Voltage raw offset value.
 */
#define OFF_AEMEngine2_ECU_GPIO4_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine2_ECUBatteryVoltage Signal ECUBatteryVoltage of Message AEMEngine2 (0x1f0a002)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine2
 * @{
 */

/**
 * Signal ECUBatteryVoltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine2_ECUBatteryVoltage and \ref GET_AEMEngine2_ECUBatteryVoltage instead.
 */
#define SIG_AEMEngine2_ECUBatteryVoltage            1, 0, 55, 16

/**
 * Signal ECUBatteryVoltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine2_ECUBatteryVoltage or \ref INIT_AEMEngine2 instead.
 */
#define SETUP_AEMEngine2_ECUBatteryVoltage          1, 0, 55, 16, 0

/**
 * Get signal ECUBatteryVoltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine2_ECUBatteryVoltage(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECUBatteryVoltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine2_ECUBatteryVoltage(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECUBatteryVoltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine2_ECUBatteryVoltage(buf) \
	SET_AEMEngine2_ECUBatteryVoltage(buf, 0)

/**
 * Signal ECUBatteryVoltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine2_ECUBatteryVoltage(x, fmt) \
	((x) * fmt / 3125)

/**
 * Signal ECUBatteryVoltage raw initial value.
 */
#define START_AEMEngine2_ECUBatteryVoltage          0

/**
 * Signal ECUBatteryVoltage raw minimum value.
 */
#define MIN_AEMEngine2_ECUBatteryVoltage            0

/**
 * Signal ECUBatteryVoltage raw maximum value.
 */
#define MAX_AEMEngine2_ECUBatteryVoltage            65535

/**
 * Signal ECUBatteryVoltage raw offset value.
 */
#define OFF_AEMEngine2_ECUBatteryVoltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine1_ECU_GPIO5_Voltage Signal ECU_GPIO5_Voltage of Message AEMEngine1 (0x1f0a001)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine1
 * @{
 */

/**
 * Signal ECU_GPIO5_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine1_ECU_GPIO5_Voltage and \ref GET_AEMEngine1_ECU_GPIO5_Voltage instead.
 */
#define SIG_AEMEngine1_ECU_GPIO5_Voltage            1, 0, 39, 16

/**
 * Signal ECU_GPIO5_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine1_ECU_GPIO5_Voltage or \ref INIT_AEMEngine1 instead.
 */
#define SETUP_AEMEngine1_ECU_GPIO5_Voltage          1, 0, 39, 16, 0

/**
 * Get signal ECU_GPIO5_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine1_ECU_GPIO5_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO5_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine1_ECU_GPIO5_Voltage(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO5_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine1_ECU_GPIO5_Voltage(buf) \
	SET_AEMEngine1_ECU_GPIO5_Voltage(buf, 0)

/**
 * Signal ECU_GPIO5_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine1_ECU_GPIO5_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO5_Voltage raw initial value.
 */
#define START_AEMEngine1_ECU_GPIO5_Voltage          0

/**
 * Signal ECU_GPIO5_Voltage raw minimum value.
 */
#define MIN_AEMEngine1_ECU_GPIO5_Voltage            0

/**
 * Signal ECU_GPIO5_Voltage raw maximum value.
 */
#define MAX_AEMEngine1_ECU_GPIO5_Voltage            65535

/**
 * Signal ECU_GPIO5_Voltage raw offset value.
 */
#define OFF_AEMEngine1_ECU_GPIO5_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine1_ECU_GPIO4_Voltage Signal ECU_GPIO4_Voltage of Message AEMEngine1 (0x1f0a001)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine1
 * @{
 */

/**
 * Signal ECU_GPIO4_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine1_ECU_GPIO4_Voltage and \ref GET_AEMEngine1_ECU_GPIO4_Voltage instead.
 */
#define SIG_AEMEngine1_ECU_GPIO4_Voltage            1, 0, 23, 16

/**
 * Signal ECU_GPIO4_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine1_ECU_GPIO4_Voltage or \ref INIT_AEMEngine1 instead.
 */
#define SETUP_AEMEngine1_ECU_GPIO4_Voltage          1, 0, 23, 16, 0

/**
 * Get signal ECU_GPIO4_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine1_ECU_GPIO4_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO4_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine1_ECU_GPIO4_Voltage(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO4_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine1_ECU_GPIO4_Voltage(buf) \
	SET_AEMEngine1_ECU_GPIO4_Voltage(buf, 0)

/**
 * Signal ECU_GPIO4_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine1_ECU_GPIO4_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO4_Voltage raw initial value.
 */
#define START_AEMEngine1_ECU_GPIO4_Voltage          0

/**
 * Signal ECU_GPIO4_Voltage raw minimum value.
 */
#define MIN_AEMEngine1_ECU_GPIO4_Voltage            0

/**
 * Signal ECU_GPIO4_Voltage raw maximum value.
 */
#define MAX_AEMEngine1_ECU_GPIO4_Voltage            65535

/**
 * Signal ECU_GPIO4_Voltage raw offset value.
 */
#define OFF_AEMEngine1_ECU_GPIO4_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine1_ECU_GPIO2_Voltage Signal ECU_GPIO2_Voltage of Message AEMEngine1 (0x1f0a001)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine1
 * @{
 */

/**
 * Signal ECU_GPIO2_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine1_ECU_GPIO2_Voltage and \ref GET_AEMEngine1_ECU_GPIO2_Voltage instead.
 */
#define SIG_AEMEngine1_ECU_GPIO2_Voltage            1, 0, 7, 16

/**
 * Signal ECU_GPIO2_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine1_ECU_GPIO2_Voltage or \ref INIT_AEMEngine1 instead.
 */
#define SETUP_AEMEngine1_ECU_GPIO2_Voltage          1, 0, 7, 16, 0

/**
 * Get signal ECU_GPIO2_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine1_ECU_GPIO2_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO2_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine1_ECU_GPIO2_Voltage(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO2_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine1_ECU_GPIO2_Voltage(buf) \
	SET_AEMEngine1_ECU_GPIO2_Voltage(buf, 0)

/**
 * Signal ECU_GPIO2_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine1_ECU_GPIO2_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO2_Voltage raw initial value.
 */
#define START_AEMEngine1_ECU_GPIO2_Voltage          0

/**
 * Signal ECU_GPIO2_Voltage raw minimum value.
 */
#define MIN_AEMEngine1_ECU_GPIO2_Voltage            0

/**
 * Signal ECU_GPIO2_Voltage raw maximum value.
 */
#define MAX_AEMEngine1_ECU_GPIO2_Voltage            65535

/**
 * Signal ECU_GPIO2_Voltage raw offset value.
 */
#define OFF_AEMEngine1_ECU_GPIO2_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_CoolantTemp Signal CoolantTemp of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal CoolantTemp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_CoolantTemp and \ref GET_AEMEngine0_CoolantTemp instead.
 */
#define SIG_AEMEngine0_CoolantTemp                  1, 1, 63, 8

/**
 * Signal CoolantTemp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_CoolantTemp or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_CoolantTemp                1, 1, 63, 8, 0

/**
 * Get signal CoolantTemp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_CoolantTemp(buf) (0 \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal CoolantTemp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_CoolantTemp(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal CoolantTemp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_CoolantTemp(buf) \
	SET_AEMEngine0_CoolantTemp(buf, 0)

/**
 * Signal CoolantTemp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_CoolantTemp(x, fmt) \
	((x) * fmt * 9 / 5 + fmt * 32)

/**
 * Signal CoolantTemp raw initial value.
 */
#define START_AEMEngine0_CoolantTemp                0

/**
 * Signal CoolantTemp raw minimum value.
 */
#define MIN_AEMEngine0_CoolantTemp                  -128

/**
 * Signal CoolantTemp raw maximum value.
 */
#define MAX_AEMEngine0_CoolantTemp                  127

/**
 * Signal CoolantTemp raw offset value.
 */
#define OFF_AEMEngine0_CoolantTemp                  18

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_IntakeManifoldAirTemp Signal IntakeManifoldAirTemp of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal IntakeManifoldAirTemp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_IntakeManifoldAirTemp and \ref GET_AEMEngine0_IntakeManifoldAirTemp instead.
 */
#define SIG_AEMEngine0_IntakeManifoldAirTemp        1, 1, 55, 8

/**
 * Signal IntakeManifoldAirTemp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_IntakeManifoldAirTemp or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_IntakeManifoldAirTemp      1, 1, 55, 8, 0

/**
 * Get signal IntakeManifoldAirTemp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_IntakeManifoldAirTemp(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal IntakeManifoldAirTemp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_IntakeManifoldAirTemp(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal IntakeManifoldAirTemp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_IntakeManifoldAirTemp(buf) \
	SET_AEMEngine0_IntakeManifoldAirTemp(buf, 0)

/**
 * Signal IntakeManifoldAirTemp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_IntakeManifoldAirTemp(x, fmt) \
	((x) * fmt * 9 / 5 + fmt * 32)

/**
 * Signal IntakeManifoldAirTemp raw initial value.
 */
#define START_AEMEngine0_IntakeManifoldAirTemp      0

/**
 * Signal IntakeManifoldAirTemp raw minimum value.
 */
#define MIN_AEMEngine0_IntakeManifoldAirTemp        -128

/**
 * Signal IntakeManifoldAirTemp raw maximum value.
 */
#define MAX_AEMEngine0_IntakeManifoldAirTemp        127

/**
 * Signal IntakeManifoldAirTemp raw offset value.
 */
#define OFF_AEMEngine0_IntakeManifoldAirTemp        18

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_ThrottlePos Signal ThrottlePos of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal ThrottlePos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_ThrottlePos and \ref GET_AEMEngine0_ThrottlePos instead.
 */
#define SIG_AEMEngine0_ThrottlePos                  1, 0, 39, 16

/**
 * Signal ThrottlePos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_ThrottlePos or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_ThrottlePos                1, 0, 39, 16, 0

/**
 * Get signal ThrottlePos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_ThrottlePos(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ThrottlePos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_ThrottlePos(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ThrottlePos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_ThrottlePos(buf) \
	SET_AEMEngine0_ThrottlePos(buf, 0)

/**
 * Signal ThrottlePos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_ThrottlePos(x, fmt) \
	((x) * fmt * 25 / 16384)

/**
 * Signal ThrottlePos raw initial value.
 */
#define START_AEMEngine0_ThrottlePos                0

/**
 * Signal ThrottlePos raw minimum value.
 */
#define MIN_AEMEngine0_ThrottlePos                  0

/**
 * Signal ThrottlePos raw maximum value.
 */
#define MAX_AEMEngine0_ThrottlePos                  65535

/**
 * Signal ThrottlePos raw offset value.
 */
#define OFF_AEMEngine0_ThrottlePos                  0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_EngineLoad Signal EngineLoad of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal EngineLoad configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_EngineLoad and \ref GET_AEMEngine0_EngineLoad instead.
 */
#define SIG_AEMEngine0_EngineLoad                   1, 0, 23, 16

/**
 * Signal EngineLoad setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_EngineLoad or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_EngineLoad                 1, 0, 23, 16, 0

/**
 * Get signal EngineLoad from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_EngineLoad(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal EngineLoad in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_EngineLoad(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal EngineLoad in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_EngineLoad(buf) \
	SET_AEMEngine0_EngineLoad(buf, 0)

/**
 * Signal EngineLoad value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_EngineLoad(x, fmt) \
	((x) * fmt * 25 / 16384)

/**
 * Signal EngineLoad raw initial value.
 */
#define START_AEMEngine0_EngineLoad                 0

/**
 * Signal EngineLoad raw minimum value.
 */
#define MIN_AEMEngine0_EngineLoad                   0

/**
 * Signal EngineLoad raw maximum value.
 */
#define MAX_AEMEngine0_EngineLoad                   0

/**
 * Signal EngineLoad raw offset value.
 */
#define OFF_AEMEngine0_EngineLoad                   0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_EngineSpeed Signal EngineSpeed of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal EngineSpeed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_EngineSpeed and \ref GET_AEMEngine0_EngineSpeed instead.
 */
#define SIG_AEMEngine0_EngineSpeed                  1, 0, 7, 16

/**
 * Signal EngineSpeed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_EngineSpeed or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_EngineSpeed                1, 0, 7, 16, 0

/**
 * Get signal EngineSpeed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_EngineSpeed(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal EngineSpeed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_EngineSpeed(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal EngineSpeed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_EngineSpeed(buf) \
	SET_AEMEngine0_EngineSpeed(buf, 0)

/**
 * Signal EngineSpeed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_EngineSpeed(x, fmt) \
	((x) * fmt * 25 / 64)

/**
 * Signal EngineSpeed raw initial value.
 */
#define START_AEMEngine0_EngineSpeed                0

/**
 * Signal EngineSpeed raw minimum value.
 */
#define MIN_AEMEngine0_EngineSpeed                  0

/**
 * Signal EngineSpeed raw maximum value.
 */
#define MAX_AEMEngine0_EngineSpeed                  65535

/**
 * Signal EngineSpeed raw offset value.
 */
#define OFF_AEMEngine0_EngineSpeed                  0

/**
 * @}
 */



#endif //CANCOMMUNICATOR_CANBUS17_H
